#!/usr/bin/env python
import os
import sys
import json
import time
import pyinotify
from subprocess import call
from subprocess import Popen
import logging

class EventHandler(pyinotify.ProcessEvent):
    package_dir='/etc/eopeers'
    installer = 'eopeers'
    test_command = 'perform_tests'
    my_package_name = '{{ own_key_name }}'

    def process_IN_CLOSE_WRITE(self, event):
        if not self.is_package_file(event.pathname):
            return False
        if not (self.is_installed(event.pathname) or self.is_my_package(event.pathname)):
            self.install(event.pathname)
            self.restart_all()
            self.run_tests()

    def process_IN_MOVED_TO(self, event):
            self.process_IN_CLOSE_WRITE(event)

    def install(self, package_path):
        try:
            self.package_command('install', package_path)
        except IOError:
            print "File {0} could not be read".format(package_path)
            print sys.exc_info()[0]

    def is_installed(self, package_name):
        name = self.installed_package_path(package_name)
        return os.path.isfile(name)

    def is_package_file(self, package_name):
        base = os.path.basename(package_name)
        return not base.startswith('.')

    def hostname(self, package_path):
        installed_path = self.installed_package_path(package_path)
        return self.read_package(installed_path, 'hostname')

    def restart_all(self):
        call(['supervisorctl', 'restart', 'all'])
        time.sleep(5)

    def package_command(self, command, arg):
        call([self.installer, '--{0}'.format(command), arg])

    def installed_package_path(self, package_name):
        host = self.read_package(package_name, 'hostname')
        return os.path.join(self.package_dir, '{0}.package'.format(host))

    def is_my_package(self, pathname):
        return  os.path.basename(pathname) == self.my_package_name

    def read_package(self, package_path, field = None):
        with open(package_path) as data_file:
                data = json.load(data_file)
                if field:
                    return data[field]
                return data

    def run_tests(self):
        Popen(['/usr/local/bin/perform_tests'], env=os.environ, shell=True)

# Crate handler
handler = EventHandler()
wm = pyinotify.WatchManager()

# Add watches
res = wm.add_watch(['{{ key_mount_path }}'],
                   pyinotify.ALL_EVENTS, rec=True)
notifier = pyinotify.Notifier(wm, handler)
notifier.loop()
